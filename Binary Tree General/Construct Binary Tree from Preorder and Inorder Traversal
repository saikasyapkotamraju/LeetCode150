Given two integer arrays preorder and inorder where preorder is the preorder traversal of a binary tree and inorder is the inorder traversal of the same tree, construct and return the binary tree.

Solution
Steps : 1. Put inorder values and positions(indices) in hashmap
        2. Identify the root value from inorder array and its index position from hash map
        3. Create a root from root value 
        4. In preorder we have left just after root value and as we are incrementing root pos by one every time construct first left and then right sub trees from corresponding 
            inorder arrays based on root position (Inoder array for left sub tree [inStart, rootPos-1] and for right sub tree [rootPos+1, inEnd]

class Solution {
    HashMap<Integer, Integer> inMap;
    int preIndex;
    public TreeNode buildTree(int[] preorder, int[] inorder) {
        inMap = new HashMap<>();
        preIndex = 0;
        for(int i=0; i<inorder.length; i++)
        {
            inMap.put(inorder[i], i);
        }
        return buildTree(preorder, inorder, 0, inorder.length-1);
    }

    public TreeNode buildTree(int[] preorder, int[] inorder, int inStart, int inEnd)
    {
        if(inStart > inEnd)return null;
        int rootVal = preorder[preIndex];
        TreeNode root = new TreeNode(rootVal);
        preIndex++;
        int rootPos = inMap.get(rootVal);
        root.left = buildTree(preorder, inorder, inStart, rootPos-1);
        root.right = buildTree(preorder, inorder, rootPos+1, inEnd);
        return root;
    }
}
